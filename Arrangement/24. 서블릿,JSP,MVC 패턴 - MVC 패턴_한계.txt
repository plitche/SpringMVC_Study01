	24. 서블릿,JSP,MVC 패턴 - MVC 패턴_한계
		* MVC 패턴을 적용한 덕분에 컨트롤러의 역할과 뷰를 렌더링하는 역할을 명확하게 구분할 수 있다.
		특히 뷰는 화면을 그리는 역할을 충실하기 때문에 코드가 깔끔하고 직관적
		단순하게 모델에서 필요한 데이터를 꺼내고, 화면을 만든다.
		하지만 컨트롤러는 중복이 많다.
		
		* 포워드 중복
		View로 이동하는 코드가 항상 중복 호출된다. 물론 이 부분을 공통화해도 되지만, 해당 메서드도 항상 직접 호출해야한다.
			> RequestDispatcher dispatcher = request.getRequestDispatcher(viewPath);
			  dispatcher.forward(request, response);
			  
			> String viewPath = "/WEB-INF/views/~~.jsp"
			
		* ViewPath에 중복
		그리고 만약 jsp가 아닌 thymeleaf 같은 다른 부로 변경한다면 전체 코드를 다 변경해야 한다.
		
		* 공통 처리가 어렵다
			> 기능이 복잡해질 수록 컨트롤러에서 공통으로 처리해야하는 부분이 점점 많이 증가한다.
			결과적으로 해당 메서드를 항상 호출해야하고, 실수로 호출하지 않으면 문제가 발생한다.
			
		!! 프론트 컨트롤러(Front Controller)
		이 문제를 해결하려면 컨트롤러 호출 전에 먼저 공통 기능을 처리해야한다. 소위 수문장 역할을 하는 기능이 필요하다.
		프론트 컨트롤러를 도입하면 이런 문제를 해결할 수 있다. (입구를 하나로!)
		스프링 MVC의 핵심도 바로 이 프론트 컨트롤러에 있다.
		