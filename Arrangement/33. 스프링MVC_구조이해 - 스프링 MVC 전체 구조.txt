	33. 스프링MVC_구조이해 - 스프링 MVC 전체 구조
		* FrontController -> DispatcherServlet
		* DispatcherServlet
			- org.springframework.web.servlet.DispatcherServlet
			- 스프링 MVC도 프론트 컨트롤러 패턴으로 구현되어 있다. = DispatcherServlet
			- 이 디스페처 서블릿이 바로 스프링 MVC의 핵심이다.
			
			- DispatcherServlet도 HttpServlet을 상송받아서 사용하고, 서블릿으로 동작한다.
				> DispatcherServlet > FrameworkServlet > HttpServletBean > HttpServlet
			- 스프링 부트는 DispatcherServlet을 서블릿으로 자동으로 등록하면서 모든 경로(urlPatterns="/")에 대해서 매핑한다.
				> 참고: 더 자세한 경로가 우선순위가 높다. 그래서 기존에 등록한 서블릿도 함께 동작한다.
				
		* 요청 흐름
			- 서블릿이 호출되면 HttpServlet이 제공하는 service()가 호출된다.
			- 스프링 MVC는 DispatcherServlet의 부모인 FrameworkServlet에서 service()를 오버라이드 해 두었다.
			- FrameworkServlet.service()를 시작으로 여러 메서드가 호출되면서 DispatcherServlet.doDispatch()가 호출된다.
			
		* 동작 순서
			1. 핸들러 조회: 핸들러 매핑을 통해 요청 URL에 매핑된 핸들러(컨트롤러)를 조회한다.
			2. 핸들러 어댑터 조회: 핸들러를 실행할 수 있는 핸들러 어댑터를 조회한다.
			3. 핸들러 어댑터 실행: 핸들러 어댑터를 실행한다.
			4. 핸들러 실행: 핸들러 어댑터가 실제 핸들러를 실행한다.
			5. ModelAndView 반환: 핸들러 어댑터는 핸들러가 반환하는 정보를 ModelAndView로 변환해서 반환한다.
			6. viewResolver 호출: 뷰 리졸버를 찾고 실행한다.
			   JSP의 경우: InternalResourceViewResolver 가 자동 등록되고, 사용된다.
			7. View 반환: 뷰 리졸버는 뷰의 논리 이름을 물리 이름으로 바꾸고, 렌더링 역할을 담당하는 뷰 객체를 반환한다.
						JSP의 경우 InternalResourceView(JstlView) 를 반환하는데, 내부에 forward() 로직이 있다.
			8. 뷰 렌더링: 뷰를 통해서 뷰를 렌더링 한다

		* 인터페이스 살펴보기
			스프링 MVC의 큰 강점은 DispatcherServlet 코드의 변경 없이, 원하는 기능을 변경하거나 확장할 수
			있다는 점이다. 지금까지 설명한 대부분을 확장 가능할 수 있게 인터페이스로 제공한다.
			이 인터페이스들만 구현해서 DispatcherServlet 에 등록하면 여러분만의 컨트롤러를 만들 수도 있다.
			
		* 주요 인터페이스 목록
			핸들러 매핑: org.springframework.web.servlet.HandlerMapping
			핸들러 어댑터: org.springframework.web.servlet.HandlerAdapter
			뷰 리졸버: org.springframework.web.servlet.ViewResolver
			뷰: org.springframework.web.servlet.View

